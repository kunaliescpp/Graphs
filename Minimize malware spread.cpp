/*
Problem Link: https://leetcode.com/problems/minimize-malware-spread/

Minimize Malware Spread

You are given a network of n nodes represented as an n x n adjacency matrix graph, where the ith node is directly connected 
to the jth node if graph[i][j] == 1. Some nodes initial are initially infected by malware. Whenever two nodes are directly 
connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread 
of malware will continue until no more nodes can be infected in this manner. Suppose M(initial) is the final number of nodes 
infected with malware in the entire network after the spread of malware stops. We will remove exactly one node from initial.
Return the node that, if removed, would minimize M(initial). If multiple nodes could be removed to minimize M(initial), return 
such a node with the smallest index.

Note that if a node was removed from the initial list of infected nodes, it might still be infected later due to the malware spread.

Example 1:
Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
Output: 0

Example 2:
Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
Output: 0

Example 3:
Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
Output: 1
 

Constraints:
n == graph.length
n == graph[i].length
2 <= n <= 300
graph[i][j] is 0 or 1.
graph[i][j] == graph[j][i]
graph[i][i] == 1
1 <= initial.length <= n
0 <= initial[i] <= n - 1
All the integers in initial are unique.
*/

class Solution {
public:
    
    void dfs(vector<vector<int>>& graph, int src, vector<bool>& visited, int& val, int& cnt, int& size, set<int>& s){
        
        if(s.count(src) == 1){
            val = src;
            cnt++;
        }
        
        visited[src] = true;
        size++;
        for(int i = 0; i < graph.size(); i++){
            if(graph[src][i] == 1 && visited[i] == false) dfs(graph, i, visited, val, cnt, size, s);
        }
    }
    
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        
        int m = graph.size();
        int n = graph[0].size();
        
        set<int> s;                               // all infected nodes
        for(int i : initial) s.insert(i);
        
        vector<bool> visited(n);
        unordered_map<int, int> mp;
        for(int i = 0; i < m; i++){
            if(visited[i] == false){
                int cnt = 0;
                int val = -1;
                int size = 0;
                dfs(graph, i, visited, val, cnt, size, s);
                if(cnt == 1) mp[val] = size;
            }
        }
        
        sort(initial.begin(), initial.end());
        if(mp.size() == 0) return initial[0];
        
        int mini = INT_MAX;
        int maxi_size = 0;
        for(auto x : mp){
            if(maxi_size < x.second){
                maxi_size = x.second;
                mini = x.first;
            }
            
            else if(maxi_size == x.second){
                if(mini >  x.first) mini = x.first;
            }
        }
        
    return mini;
    }
};


